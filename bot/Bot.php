<?php
/**
 * Telegram Bot Handler Class
 */

class Bot {
    private $db;
    private $update;
    private $message;
    private $chat_id;
    private $user_id;
    private $user;

    public function __construct($update) {
        $this->db = Database::getInstance();
        $this->update = $update;

        if (isset($update['message'])) {
            $this->message = $update['message'];
            $this->chat_id = $this->message['chat']['id'];
            $this->user_id = $this->message['from']['id'];
        } elseif (isset($update['callback_query'])) {
            $this->message = $update['callback_query']['message'];
            $this->chat_id = $this->message['chat']['id'];
            $this->user_id = $update['callback_query']['from']['id'];
        }

        // Initialize or get user
        if ($this->user_id) {
            $this->user = $this->db->getUser($this->user_id);
            if (!$this->user) {
                $this->createNewUser();
            } else {
                $this->db->updateUserActivity($this->user_id);
            }
        }
    }

    private function createNewUser() {
        $user_data = [
            'user_id' => $this->user_id,
            'username' => $this->message['from']['username'] ?? null,
            'first_name' => $this->message['from']['first_name'] ?? null,
            'last_name' => $this->message['from']['last_name'] ?? null
        ];

        // Check for referral
        if (isset($this->message['text'])) {
            $parts = explode(' ', $this->message['text']);
            if (count($parts) > 1 && strpos($parts[1], 'REF') === 0) {
                $referrer = $this->db->getUserByReferralCode($parts[1]);
                if ($referrer && $referrer['user_id'] != $this->user_id) {
                    $user_data['referred_by'] = $referrer['user_id'];
                }
            }
        }

        $this->db->createUser($user_data);
        $this->user = $this->db->getUser($this->user_id);

        // Process referral bonus
        if (isset($user_data['referred_by'])) {
            $this->db->createReferral($user_data['referred_by'], $this->user_id);
            $this->sendMessage($user_data['referred_by'], "๐ ูุจุฑูู! ููุฏ ูุงู ุตุฏููู ุจุงูุงูุถูุงู ูุญุตูุช ุนูู " . $this->db->getSetting('points_per_referral') . " ููุทุฉ!");
        }
    }

    public function process() {
        try {
            // Check if user is blocked
            if ($this->user && $this->user['is_blocked']) {
                $this->sendMessage($this->chat_id, "โ ุชู ุญุธุฑ ุญุณุงุจู ูู ุงุณุชุฎุฏุงู ุงูุจูุช.");
                return;
            }

            if (isset($this->update['message'])) {
                $this->handleMessage();
            } elseif (isset($this->update['callback_query'])) {
                $this->handleCallbackQuery();
            }
        } catch (Exception $e) {
            logError("Bot Process Error: " . $e->getMessage());
            $this->sendMessage($this->chat_id, "ุญุฏุซ ุฎุทุฃุ ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู.");
        }
    }

    private function handleMessage() {
        $text = $this->message['text'] ?? '';

        if ($text === '/start' || strpos($text, '/start') === 0) {
            $this->handleStart();
        } elseif ($text === '/help') {
            $this->handleHelp();
        } elseif ($text === '/mypoints' || $text === 'ููุงุทู') {
            $this->handleMyPoints();
        } elseif ($text === '/referral' || $text === 'ุฏุนูุฉ ุงูุฃุตุฏูุงุก') {
            $this->handleReferral();
        } elseif ($text === '/store' || $text === 'ุงููุชุฌุฑ') {
            $this->handleStore();
        } elseif ($text === '/earn' || $text === 'ุงูุณุจ ููุงุท') {
            $this->handleEarn();
        } elseif (isAdmin($this->user_id)) {
            if ($text === '/admin' || $text === 'ููุญุฉ ุงูุฅุฏุงุฑุฉ') {
                $this->handleAdminPanel();
            } elseif ($text === '/stats' || $text === 'ุงูุฅุญุตุงุฆูุงุช') {
                $this->handleStats();
            } elseif (strpos($text, '/broadcast') === 0) {
                $this->handleBroadcast($text);
            }
        } else {
            $this->handleUnknownCommand();
        }
    }

    private function handleCallbackQuery() {
        $callback_data = $this->update['callback_query']['data'];
        $callback_id = $this->update['callback_query']['id'];

        $parts = explode(':', $callback_data);
        $action = $parts[0];

        switch ($action) {
            case 'buy':
                $product_id = $parts[1];
                $this->handleBuyProduct($product_id, $callback_id);
                break;

            case 'confirm_buy':
                $product_id = $parts[1];
                $this->handleConfirmBuy($product_id, $callback_id);
                break;

            case 'view_ad':
                $ad_id = $parts[1];
                $this->handleViewAd($ad_id, $callback_id);
                break;

            case 'admin_products':
                $this->handleAdminProducts($callback_id);
                break;

            case 'admin_ads':
                $this->handleAdminAds($callback_id);
                break;

            case 'admin_users':
                $this->handleAdminUsers($callback_id);
                break;

            default:
                $this->answerCallbackQuery($callback_id, "Unknown action");
        }
    }

    private function handleStart() {
        $welcome_message = $this->db->getSetting('welcome_message');

        $keyboard = [
            [
                ['text' => '๐ ุงููุชุฌุฑ', 'web_app' => ['url' => MINI_APP_URL]]
            ],
            [
                ['text' => '๐ฐ ุงูุณุจ ููุงุท'],
                ['text' => '๐ฅ ุฏุนูุฉ ุงูุฃุตุฏูุงุก']
            ],
            [
                ['text' => '๐ ููุงุทู'],
                ['text' => '๐ ุฅุญุตุงุฆูุงุชู']
            ]
        ];

        if (isAdmin($this->user_id)) {
            $keyboard[] = [['text' => 'โ๏ธ ููุญุฉ ุงูุฅุฏุงุฑุฉ']];
        }

        $reply_markup = [
            'keyboard' => $keyboard,
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];

        $text = "$welcome_message\n\n";
        $text .= "๐ค ูุฑุญุจุงู " . ($this->user['first_name'] ?? 'ุนุฒูุฒู') . "!\n";
        $text .= "๐ ููุงุทู ุงูุญุงููุฉ: " . $this->user['points'] . " ููุทุฉ\n\n";
        $text .= "๐ ุชุตูุญ ุงููุชุฌุฑ ูุงุดุชุฑู ุงูููุชุฌุงุช ุงูุฑูููุฉ\n";
        $text .= "๐ฐ ุงูุณุจ ุงูููุงุท ูู ุฎูุงู ูุดุงูุฏุฉ ุงูุฅุนูุงูุงุช\n";
        $text .= "๐ฅ ุงุฏุนู ุฃุตุฏูุงุกู ูุงุญุตู ุนูู ููุงุท ุฅุถุงููุฉ!\n\n";
        $text .= "ุงุถุบุท ุนูู ุงูุฃุฒุฑุงุฑ ุจุงูุฃุณูู ููุจุฏุก ๐";

        $this->sendMessage($this->chat_id, $text, $reply_markup);
    }

    private function handleHelp() {
        $text = "๐ *ุฏููู ุงูุงุณุชุฎุฏุงู*\n\n";
        $text .= "๐ *ุงููุชุฌุฑ*: ุชุตูุญ ูุดุฑุงุก ุงูููุชุฌุงุช ุงูุฑูููุฉ\n";
        $text .= "๐ฐ *ุงูุณุจ ููุงุท*: ุดุงูุฏ ุงูุฅุนูุงูุงุช ูุงุญุตู ุนูู ููุงุท\n";
        $text .= "๐ฅ *ุฏุนูุฉ ุงูุฃุตุฏูุงุก*: ุงุญุตู ุนูู ููุงุท ุนูุฏ ุฏุนูุฉ ุฃุตุฏูุงุฆู\n";
        $text .= "๐ *ููุงุทู*: ุนุฑุถ ุฑุตูุฏู ูุฅุญุตุงุฆูุงุชู\n\n";
        $text .= "๐ ููุฏุนู: @support";

        $this->sendMessage($this->chat_id, $text, null, 'Markdown');
    }

    private function handleMyPoints() {
        $text = "๐ *ูุนูููุงุช ุญุณุงุจู*\n\n";
        $text .= "๐ฐ ุงูุฑุตูุฏ ุงูุญุงูู: *" . $this->user['points'] . "* ููุทุฉ\n";
        $text .= "๐ ุฅุฌูุงูู ุงูููุงุท ุงูููุชุณุจุฉ: " . $this->user['total_earned'] . " ููุทุฉ\n";
        $text .= "๐ ุฅุฌูุงูู ุงูููุงุท ุงูููููุฉ: " . $this->user['total_spent'] . " ููุทุฉ\n\n";

        // Referral stats
        $referral_stats = $this->db->getReferralStats($this->user_id);
        $text .= "๐ฅ ุนุฏุฏ ุฏุนูุงุชู: " . $referral_stats['total'] . " ุดุฎุต\n";
        $text .= "๐ ููุงุท ูู ุงูุฏุนูุงุช: " . $referral_stats['total_points'] . " ููุทุฉ\n";

        $this->sendMessage($this->chat_id, $text, null, 'Markdown');
    }

    private function handleReferral() {
        $referral_link = "https://t.me/" . BOT_USERNAME . "?start=" . $this->user['referral_code'];
        $points_per_referral = $this->db->getSetting('points_per_referral');

        $text = "๐ฅ *ูุธุงู ุงูุฏุนูุงุช*\n\n";
        $text .= "๐ ุงุญุตู ุนูู *$points_per_referral ููุทุฉ* ุนู ูู ุตุฏูู ุชุฏุนูู!\n\n";
        $text .= "๐ ุฑุงุจุท ุฏุนูุชู ุงูุฎุงุต:\n";
        $text .= "`$referral_link`\n\n";
        $text .= "๐ ุฅุญุตุงุฆูุงุชู:\n";

        $referral_stats = $this->db->getReferralStats($this->user_id);
        $text .= "๐ฅ ุนุฏุฏ ุงูุฏุนูุงุช: " . $referral_stats['total'] . "\n";
        $text .= "๐ ุงูููุงุท ุงูููุชุณุจุฉ: " . $referral_stats['total_points'] . "\n\n";
        $text .= "ุดุงุฑู ุงูุฑุงุจุท ูุน ุฃุตุฏูุงุฆู ุงูุขู! ๐";

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => '๐ค ูุดุงุฑูุฉ ุงูุฑุงุจุท', 'url' => "https://t.me/share/url?url=" . urlencode($referral_link) . "&text=" . urlencode("ุงูุถู ูุนู ูู ูุฐุง ุงููุชุฌุฑ ุงูุฑุงุฆุน ูุงุญุตู ุนูู ููุชุฌุงุช ุฑูููุฉ ูุฌุงูุงู!")]
                ]
            ]
        ];

        $this->sendMessage($this->chat_id, $text, $keyboard, 'Markdown');
    }

    private function handleStore() {
        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => '๐ ุงูุชุญ ุงููุชุฌุฑ', 'web_app' => ['url' => MINI_APP_URL]]
                ]
            ]
        ];

        $text = "๐ *ูุชุฌุฑ ุงูููุชุฌุงุช ุงูุฑูููุฉ*\n\n";
        $text .= "ุงุถุบุท ุนูู ุงูุฒุฑ ุจุงูุฃุณูู ููุชุญ ุงููุชุฌุฑ ๐\n";
        $text .= "๐ ุฑุตูุฏู: " . $this->user['points'] . " ููุทุฉ";

        $this->sendMessage($this->chat_id, $text, $keyboard, 'Markdown');
    }

    private function handleEarn() {
        $ads = $this->db->getActiveAds();

        if (empty($ads)) {
            $this->sendMessage($this->chat_id, "โ ูุง ุชูุฌุฏ ุฅุนูุงูุงุช ูุชุงุญุฉ ุญุงููุงูุ ุนุฏ ูุงุญูุงู!");
            return;
        }

        $keyboard = ['inline_keyboard' => []];

        foreach ($ads as $ad) {
            $emoji = $ad['type'] === 'video' ? '๐ฅ' : '๐';
            $keyboard['inline_keyboard'][] = [
                ['text' => "$emoji {$ad['title']} (+{$ad['points_reward']} ููุทุฉ)", 'callback_data' => "view_ad:{$ad['id']}"]
            ];
        }

        $text = "๐ฐ *ุงูุณุจ ุงูููุงุท*\n\n";
        $text .= "ุงุฎุชุฑ ุฃุญุฏ ุงูุฅุนูุงูุงุช ููุดุงูุฏุชู ูุงูุญุตูู ุนูู ููุงุท:\n\n";
        $text .= "๐ ุฑุตูุฏู ุงูุญุงูู: " . $this->user['points'] . " ููุทุฉ";

        $this->sendMessage($this->chat_id, $text, $keyboard, 'Markdown');
    }

    private function handleViewAd($ad_id, $callback_id) {
        $ad = $this->db->getAd($ad_id);

        if (!$ad || !$ad['is_active']) {
            $this->answerCallbackQuery($callback_id, "โ ุงูุฅุนูุงู ุบูุฑ ูุชุงุญ");
            return;
        }

        // Record ad view
        $ip = $_SERVER['REMOTE_ADDR'] ?? null;
        $this->db->recordAdView($this->user_id, $ad_id, $ip);

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => '๐ ุงูุชุญ ุงูุฅุนูุงู (+' . $ad['points_reward'] . ' ููุทุฉ)', 'url' => $ad['url']]
                ]
            ]
        ];

        $text = "๐ข *{$ad['title']}*\n\n";
        if ($ad['description']) {
            $text .= "{$ad['description']}\n\n";
        }
        $text .= "๐ ุงูููุงูุฃุฉ: {$ad['points_reward']} ููุทุฉ\n\n";
        $text .= "ุงุถุบุท ุนูู ุงูุฒุฑ ุจุงูุฃุณูู ููุชุญ ุงูุฅุนูุงู ๐\n";
        $text .= "ุจุนุฏ ุฅููุงู ุงููุดุงูุฏุฉ ุณูุชู ุฅุถุงูุฉ ุงูููุงุท ุชููุงุฆูุงู!";

        $this->sendMessage($this->chat_id, $text, $keyboard, 'Markdown');
        $this->answerCallbackQuery($callback_id);

        // For automatic completion (ูููู ุชุญุณููู ูุน callback ูู API ุงูุฅุนูุงูุงุช)
        // Simulate completion after viewing (ูู ุงููุงูุน ูุฌุจ ุงุณุชุฎุฏุงู webhooks ูู API)
        // $this->db->completeAdView($this->user_id, $ad_id);
    }

    private function handleBuyProduct($product_id, $callback_id) {
        $product = $this->db->getProduct($product_id);

        if (!$product || !$product['is_active']) {
            $this->answerCallbackQuery($callback_id, "โ ุงูููุชุฌ ุบูุฑ ูุชุงุญ");
            return;
        }

        $price = $product['price'];
        if ($product['is_offer'] && $product['offer_price']) {
            $price = $product['offer_price'];
        }

        $text = "๐ *{$product['name']}*\n\n";
        $text .= "{$product['description']}\n\n";
        $text .= "๐ฐ ุงูุณุนุฑ: *$price* ููุทุฉ\n";
        $text .= "๐ ุฑุตูุฏู: *{$this->user['points']}* ููุทุฉ\n\n";

        if ($this->user['points'] < $price) {
            $text .= "โ ุฑุตูุฏู ุบูุฑ ูุงูู ูุดุฑุงุก ูุฐุง ุงูููุชุฌ\n";
            $text .= "ุงุญุชุงุฌ ุฅูู " . ($price - $this->user['points']) . " ููุทุฉ ุฅุถุงููุฉ";

            $keyboard = [
                'inline_keyboard' => [
                    [['text' => '๐ฐ ุงูุณุจ ุงููุฒูุฏ ูู ุงูููุงุท', 'callback_data' => 'earn']]
                ]
            ];
        } else {
            $text .= "ูู ุฃูุช ูุชุฃูุฏ ูู ุงูุดุฑุงุกุ";

            $keyboard = [
                'inline_keyboard' => [
                    [
                        ['text' => 'โ ุชุฃููุฏ ุงูุดุฑุงุก', 'callback_data' => "confirm_buy:$product_id"],
                        ['text' => 'โ ุฅูุบุงุก', 'callback_data' => 'store']
                    ]
                ]
            ];
        }

        $this->editMessage($this->chat_id, $this->message['message_id'], $text, $keyboard, 'Markdown');
        $this->answerCallbackQuery($callback_id);
    }

    private function handleConfirmBuy($product_id, $callback_id) {
        $result = $this->db->createOrder($this->user_id, $product_id);

        if ($result['success']) {
            $text = "โ *ุชู ุงูุดุฑุงุก ุจูุฌุงุญ!*\n\n";
            $text .= "๐ ุงูููุชุฌ: {$result['product_name']}\n\n";
            $text .= "๐ฆ *ูุญุชูู ุงูููุชุฌ:*\n";
            $text .= "`{$result['content']}`\n\n";
            $text .= "๐ ุฑุตูุฏู ุงููุชุจูู: " . $this->db->getUser($this->user_id)['points'] . " ููุทุฉ\n\n";
            $text .= "ุดูุฑุงู ูุดุฑุงุฆู! โจ";

            $this->answerCallbackQuery($callback_id, "โ ุชู ุงูุดุฑุงุก ุจูุฌุงุญ!");

            // Notify admin
            if (isAdmin(ADMIN_ID)) {
                $admin_text = "๐ *ุนูููุฉ ุดุฑุงุก ุฌุฏูุฏุฉ*\n\n";
                $admin_text .= "๐ค ุงููุณุชุฎุฏู: " . ($this->user['username'] ? "@{$this->user['username']}" : $this->user['first_name']) . "\n";
                $admin_text .= "๐ ุงูููุชุฌ: {$result['product_name']}\n";
                $admin_text .= "๐ Order ID: {$result['order_id']}";

                $this->sendMessage(ADMIN_ID, $admin_text, null, 'Markdown');
            }
        } else {
            $text = "โ ูุดู ุงูุดุฑุงุก: " . $result['error'];
            $this->answerCallbackQuery($callback_id, "โ " . $result['error']);
        }

        $this->editMessage($this->chat_id, $this->message['message_id'], $text, null, 'Markdown');
    }

    private function handleAdminPanel() {
        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => '๐ ุงูุฅุญุตุงุฆูุงุช', 'callback_data' => 'admin_stats'],
                    ['text' => '๐ฅ ุงููุณุชุฎุฏููู', 'callback_data' => 'admin_users']
                ],
                [
                    ['text' => '๐ ุงูููุชุฌุงุช', 'callback_data' => 'admin_products'],
                    ['text' => '๐ข ุงูุฅุนูุงูุงุช', 'callback_data' => 'admin_ads']
                ],
                [
                    ['text' => 'โ๏ธ ุงูุฅุนุฏุงุฏุงุช', 'callback_data' => 'admin_settings']
                ]
            ]
        ];

        $text = "โ๏ธ *ููุญุฉ ุงูุฅุฏุงุฑุฉ*\n\n";
        $text .= "ุงุฎุชุฑ ุงููุณู ุงูุฐู ุชุฑูุฏ ุฅุฏุงุฑุชู:";

        $this->sendMessage($this->chat_id, $text, $keyboard, 'Markdown');
    }

    private function handleStats() {
        $stats = $this->db->getStats();

        $text = "๐ *ุฅุญุตุงุฆูุงุช ุงูุจูุช*\n\n";
        $text .= "๐ฅ ุฅุฌูุงูู ุงููุณุชุฎุฏููู: " . $stats['total_users'] . "\n";
        $text .= "๐ข ูุดุทูู ุงูููู: " . $stats['active_today'] . "\n";
        $text .= "๐ ุงูููุชุฌุงุช ุงููุดุทุฉ: " . $stats['active_products'] . "\n";
        $text .= "๐ ุฅุฌูุงูู ุงูุทูุจุงุช: " . $stats['total_orders'] . "\n";
        $text .= "๐ฐ ุฅุฌูุงูู ุงูุฅูุฑุงุฏุงุช: " . $stats['total_revenue'] . " ููุทุฉ\n";
        $text .= "๐บ ูุดุงูุฏุงุช ุงูุฅุนูุงูุงุช: " . $stats['total_ad_views'] . "\n";

        $this->sendMessage($this->chat_id, $text, null, 'Markdown');
    }

    private function handleBroadcast($text) {
        // Extract message after /broadcast
        $message = trim(substr($text, 10));

        if (empty($message)) {
            $this->sendMessage($this->chat_id, "ุงูุงุณุชุฎุฏุงู: /broadcast ุฑุณุงูุชู ููุง");
            return;
        }

        // Get all users
        $db = $this->db->getConnection();
        $stmt = $db->query("SELECT user_id FROM users WHERE is_blocked = 0");
        $users = $stmt->fetchAll();

        $sent = 0;
        $failed = 0;

        foreach ($users as $user) {
            $result = $this->sendMessage($user['user_id'], "๐ข *ุฑุณุงูุฉ ูู ุงูุฅุฏุงุฑุฉ*\n\n$message", null, 'Markdown');
            if ($result) {
                $sent++;
            } else {
                $failed++;
            }
            usleep(50000); // 50ms delay to avoid rate limiting
        }

        $this->sendMessage($this->chat_id, "โ ุชู ุงูุฅุฑุณุงู ุฅูู $sent ูุณุชุฎุฏู\nโ ูุดู ุงูุฅุฑุณุงู ุฅูู $failed ูุณุชุฎุฏู");
    }

    private function handleUnknownCommand() {
        $this->sendMessage($this->chat_id, "โ ุฃูุฑ ุบูุฑ ูุนุฑูู. ุงูุชุจ /help ูููุณุงุนุฏุฉ");
    }

    // Telegram API Methods
    private function sendMessage($chat_id, $text, $reply_markup = null, $parse_mode = null) {
        $data = [
            'chat_id' => $chat_id,
            'text' => $text
        ];

        if ($reply_markup) {
            $data['reply_markup'] = json_encode($reply_markup);
        }

        if ($parse_mode) {
            $data['parse_mode'] = $parse_mode;
        }

        return sendRequest('sendMessage', $data);
    }

    private function editMessage($chat_id, $message_id, $text, $reply_markup = null, $parse_mode = null) {
        $data = [
            'chat_id' => $chat_id,
            'message_id' => $message_id,
            'text' => $text
        ];

        if ($reply_markup) {
            $data['reply_markup'] = json_encode($reply_markup);
        }

        if ($parse_mode) {
            $data['parse_mode'] = $parse_mode;
        }

        return sendRequest('editMessageText', $data);
    }

    private function answerCallbackQuery($callback_id, $text = null, $show_alert = false) {
        $data = ['callback_query_id' => $callback_id];

        if ($text) {
            $data['text'] = $text;
            $data['show_alert'] = $show_alert;
        }

        return sendRequest('answerCallbackQuery', $data);
    }

    private function handleAdminProducts($callback_id) {
        $this->answerCallbackQuery($callback_id);
        $text = "๐ *ุฅุฏุงุฑุฉ ุงูููุชุฌุงุช*\n\n";
        $text .= "ูุฅุถุงูุฉ ููุชุฌ ุฌุฏูุฏุ ุงุณุชุฎุฏู ุงูุฃูุฑ:\n";
        $text .= "`/addproduct`";

        $this->sendMessage($this->chat_id, $text, null, 'Markdown');
    }

    private function handleAdminAds($callback_id) {
        $this->answerCallbackQuery($callback_id);
        $text = "๐ข *ุฅุฏุงุฑุฉ ุงูุฅุนูุงูุงุช*\n\n";
        $text .= "ูุฅุถุงูุฉ ุฅุนูุงู ุฌุฏูุฏุ ุงุณุชุฎุฏู ุงูุฃูุฑ:\n";
        $text .= "`/addad`";

        $this->sendMessage($this->chat_id, $text, null, 'Markdown');
    }

    private function handleAdminUsers($callback_id) {
        $this->answerCallbackQuery($callback_id);
        $db = $this->db->getConnection();
        $stmt = $db->query("SELECT COUNT(*) as total,
                           SUM(CASE WHEN is_blocked = 1 THEN 1 ELSE 0 END) as blocked,
                           SUM(points) as total_points
                           FROM users");
        $stats = $stmt->fetch();

        $text = "๐ฅ *ุฅุฏุงุฑุฉ ุงููุณุชุฎุฏููู*\n\n";
        $text .= "๐ ุฅุฌูุงูู ุงููุณุชุฎุฏููู: " . $stats['total'] . "\n";
        $text .= "๐ซ ุงููุญุธูุฑูู: " . $stats['blocked'] . "\n";
        $text .= "๐ฐ ุฅุฌูุงูู ุงูููุงุท: " . $stats['total_points'] . "\n";

        $this->sendMessage($this->chat_id, $text, null, 'Markdown');
    }
}
